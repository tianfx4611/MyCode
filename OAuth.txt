Oauth 2.0

角色分为  
resoure owner(资源所有者)   能够授予对受保护资源的访问权限的实体

resoure Server(资源服务器)  托管受保护资源的服务器，能够使用访问令牌接受和响应受保护资源请求

client(客户端) 资源所有者及其授权进行受保护资源请求的应用程序

 Authorization server (授权服务器)   验证资源所有者并获取授权后，服务器向客户端发出访问令牌
 
 
授权服务器和资源服务器之间的交互 超出了本规范的范围。授权服务器 可以是与资源服务器相同的服务器或单独的实体。
单个授权服务器可以发出由多个资源服务器接受的访问令牌

协议流程  分为三步

1 客户端请求资源所有者资源 收到请求后 返回给客户端一个授权成功给客户端 
2 客户端有了权限之后 去请求授权服务器   得到 access token 然后将这个token 返回给客户端 
3 客户端拿到这个token之后 去请求资源服务器  令牌如果有效则向客户端提供服务

授权方式有四种 
1 authorization code  				授权码模式
2 implicit							简化模式
3 resource owner password credentials 用户名密码模式
4 client credentials 					客户端凭证

Authorization code ：
走向
client -> Resoure Server(资源服务器)- client 将资源所有者带回客户端 

通过授权服务器作为客户端和资源所有者之间的中介来获得授权代码。 客户端不是直接从资源所有者请求授权 而是将资源所有者指向授权服务器 授权服务器又将资源所有者带回授权代码的客户端。

在Authoriization code 指回客户端时 授权服务器对资源所有者 进行身份验证并过去授权   （因为资源所有者仅使用授权服务器对资源身份进行验证 永远不会与客户共享所有者的凭据）

优势 
客户端进行验证的能力，以及将访问令牌直接传输到客户端而不将其传递给资源所有者的用户代理并可能将其暴露给其他人，包括资源所有者

implicit  适用于纯前端项目 
(从oAuth跳转回来在URL里面就携带了 access token )

用户访问客户端  后端点击是否授权  用户给予授权   认证服务器就向客户端发送一个access token    client 拿着access token 去访问resorce资源

第一步 客户端识别  重定向到认证服务器  第二步 用户进行身份验证  同意授权则URL上携带一个access token 返回给客户端 随后客户端可以通拿着access token 去访问resorce资源


resource owner password credentials 
用户 可以直接用作授权访问令牌
这种模式只有在资源所有者 和客户端之间高度信任时使用较好

此类型客户端直接访问资源所有者凭据 资源所有者凭据 也会由于单个请求并交换令牌

client credentials
直接由Client向Authorization Server请求access token，无需用户（Resource Owner）的授权。


Access Token
是用于访问受保护资源的凭据  一个访问令牌是代表颁发给授权的字符串的客户端  令牌表示由资源所有者授予并有资源服务器和授权服务器强制执行
的特定的范围和持续的时间

Refresh Token
刷新令牌是用于获取访问令牌的凭据  刷新令牌由授权服务器发布给客户端 用于在当前访问令牌 失效或者过期时获取新的访问令牌
或者获取具有相同或更窄方位的其他访问令牌

客户端请求授权服务器  授权成功 授权服务器放回 access token和 refresh Token 给client  client拿着access token 去请求资源服务器
隔了一段时间后  access token过期失效时  客户端携带 refresh token去请求授权服务器 得到access token client才可以继续请求客户端
  
授权码授权流程

1.客户端通过将资源所有者的用户代理指向授权端点 来启动流  客户端包括其客户端标识符 请求的范围 本地状态以及授权服务器在授权 成功或（拒绝）后
重定向的URL
2.授权服务器验证资源所有者(通过用户代理) 用确定资源所有者是否授予或拒绝客户端的访问请求
3.资源所有者授予访问权限以后 马上使用第一步 传递的重定向的URL 进行重定向 将用户代理重定向回客户端 重定向URL包括授权代码（Authorization Code）和客户端
先前提供的任何状态
4.客户端通过包括前一步获取的授权码 从授权服务器的令牌端点请求访问令牌。 发出请求时 客户端使用授权服务器进行身份验证 
客户端包含用于获取授权的重定向URL验证码
5.授权服务器验证客户端，验证授权代码并确保接受到的重定向URL与第三步用于重定向客户端的URL相同 如果相同 授权服务器 返回  Access Token 和 RefreshToken

授权请求(Authorization Request)

客户端 使用application / x-www-form-urlencoded 格式 把参数添加到授权端点URL的查询组件来构造请求URL
Response_Tyoe  required    值 必须为 code 
client_id  客户端标志  必须和授权服务器Client_id 一致
redirect_uri 重定向的URL
scope  可选的范围
state	客户端用于维护请求和回调之间状态的不透明值 授权服务器在将用户代理重定向回客户端时包含此值。这个参数用于防止跨站请求伪造

授权服务器验证请求的时候 确保所有必需的参数都在并且有效 如果请求有效  授权服务器将对资源所有者进行身份验证并获取授权决策


授权响应(authorization code)
资源所有者授予访问请求 则授权服务器通过"application/x-www-form-urlencode" 格式将 下一行的参数添加到重定向的URL中 然后Authorization code 返回给客户端
参数：
	required 授权服务器生成的授权码必须在发布后立马到期降低暴露的风险 一个授权码的最大生命周期是十分钟  客户端不能使用授权码
在使用授权码多次请求的时候 授权服务器必须拒绝该请求 并且应该撤销基于该授权码发出的所有令牌  授权代码 绑定到客户端标识符和重定向URL
授权请求中存在 state 参数 则状态为 required 从客户端收到确切的值

授权服务器通过发送一下HTTP响应来重定向用户代理
客户端必须忽略无法识别的响应参数 该授权码串的大小有该未定义规范。客户端避免对代码值大小进行假设。 授权服务器记录发出值的大小

错误响应(Error response) 
如果请求缺少 无效或不匹配的重定向URL而失败，或者客户端标识丢失或无效 授权服务器应该通知资源所有者错误 并且不得自动将用户代理重定向到无效重定向UR了

如果资源所有者拒绝请求 或者请求因缺少或无效的重定向URL意外的原因而失败 则 授权服务器通过使用"application/x-www-form-urlencode"
把参数添加到授权端点URL的查询组件来通知客户端
常见的几个错误
invalid_request  请求缺少必须参数包含无效值 包含多余一次的参数  或者其他方式格式错误
Unauthorization_client  未授权（401）  您没有使用还方法的权限  请求无效
access_denied  资源所有者或授权服务器拒绝了该请求
unsupported_response_type  授权服务器不支持使用此方法获取访问令牌
invalid_Scope 请求范围无效，未知或格式错误
server_error 授权服务器遇到意外情况，导致无法完成请求(此错误代码是必需的，因为无法通过HTTP重定向将500内部服务器错误HTTP状态代码返回到客户端。)
temporary_unavailable   由于服务器的临时过载或维护，授权服务器当前无法处理请求 （503错误不可用HTTP状态无法通过HTTP重定向返回给客户端）
error_description   错误详细信息  用于开发人员获取详细信息
error_uri 阅读错误信息的网址 用于客户端开发人员提供有关错误的其他信息"error_uri" 参数的值必须符合URL引用语法 如果客户端授权请求中存在"state"
则 required 从客户端收到的确切的值



resource owner password credentials 资源所有者密码凭据授权

是用于资源所有者和客户端具有想信任的情况

第一步  资源所有者向客户端提供用户名和密码
第二部  客户端通过从资源所有者接受的凭证来请求来自授权服务器的令牌端点访问令牌 发出请求时，客户端使用授权服务器进行身份验证
第三步  授权服务器验证资源所有者凭证 如果有效则颁发访问令牌

访问令牌请求需要指定的几个参数

Grant_type  必须设置为(password)密码  
username	用户名必填
password 	必填
scope		可选范围
ClientSecret	客服端凭证
clientId		


授权服务器必须：
要求客户端或发出客户端凭据（或其他身份验证要求）的任何客户端进行客户端身份验证。
如果包含客户端身份验证，则对客户端进行身份验证，并验证资源所有者密码凭证使用其现有密码验证算法。

由于此访问令牌请求是有资源所有制的密码，因此授权服务器必须保护端点免受暴力攻击。 （库人员，使用速率限制或生产警报）

token response
如果访问令牌有效且活得授权，则授权服务器发出访问令牌和可选的刷新令牌   如果请求未通过客户端身份验证或者无效，则授权服务器返回错误响应

Client Credentials Grant  客户端凭据授权

当客户端请求访问受其控制的受保护资源时，客户端可以使用其客户端凭证（或其他支持的身份验证方法），请求访问令牌，或者先前已使用授权服务器安排的其他资源所有者的访问令牌。
客户端凭据授权类型必须收机密客户端使用。

流程图：
客户端与授权服务进行认真丛令牌端点请求访问令牌
授权服务器验证客户端如果有效 则颁发access token

token  request

请求格式 "application/x-www-form-urlencodeed"
参数：
grant_type 必填 client_credentials
scope 可选范围

在请求时 授权服务器必须对客户端进行身份验证

token response
成功时 返回
Content_type "application/json:charset = UTF-8"
access_token
token_type
expires_in
Example-parameter


Issuing an Access Token (发出访问令牌)

如果访问令牌请求有效且已获得授权，则授权服务器发出access token和refresh token 如果请求没通过或无效，授权服务器返回错误响应

access token 待会的参数：

access_token 授权服务器发出的访问令牌(每次请求时都需要带上他)
token_type	 token的类型 不区分大小写
expires_in   访问令牌的有效时间（从生成的时候就开始计算 到期access_token无效）
refresh_token  刷新令牌。用来获取新的令牌。
scope  访问范围

客户端必须忽略无法识别的响应参数 从授权服务器接收的令牌和其他值的大小未定义。

error response

有如下错误
invalid_request
缺少必须参数 包括不受支持的参数值 重复参数 包含多个凭据 使用多种机制验证客户端 
invalid_client
客户端身份验证失败（未知客户端，未知包含客户端身份验证或不支持的身份验证方法），授权服务器可以放回401（未授权）状态码指示支持哪些http认证方案。
如果客户端试图通过"授权"请求头字段进行认证，则授权服务器必须以HTTP 401 状态码进行响应并包括与客户端使用认证方案匹配的"www-Authenticate"响应字段头
invalid_grant
提供的授权令牌或刷新令牌无效，已过期，已撤销，与授权请求中使用的重定向URL不匹配 或已发布给其他客户端
unauthorization_client 
客户端没授权
unsupported_grant_type
授权服务器不支持授权授予类型
invalid_Scope 请求范围无效，未知，格式错误或超出资源所有者授予的范围
error_description
错误详细信息 帮助开发人员排除错误
error_uri 
一个url用于标识包含错误信息的人类可读网页，用于客户端开发人员提供有关错误的其他信息



Refresh AccessToken（刷新访问令牌）
请求格式"application/x-www-form-urlencodeed"
参数：
grant_type:refresh_token
refresh_token:表单传递的值
scope：可选的范围

刷新令牌通常是用于请求其他访问令牌的持久凭证，因此刷新令牌将绑定到发布它的客户端。如果客户端类型是机密的或客户端已获得客户端凭证
则客户端必须使用授权服务器进行验证

授权服务器
要求对机密客户端或已发出客户端凭据（或其他身份验证要求）的任何客户端进行客户端身份验证
如果包含客户端身份验证，则对客户端进行身份验证并确保刷新令牌已颁发给经过身份验证的客户端，并验证刷新令牌

授权服务器可以发出新的刷新令牌，在这种情况下，客户端必须丢弃就得刷新令牌并将其替换为新的刷新令牌，授权服务器可以在向客户端发出新的刷新令牌后撤销旧的刷新令牌
如果发出新的刷新令牌，则刷新令牌必须与请求中的客户端包含的刷新令牌的范围相同。

Accessing Protected Resources（访问受保护资源）
客户端向资源服务器提供访问令牌来访问保护资源权限，资源服务器必须验证访问令牌 并确保令牌未过期，并且其范围涵盖所请求的资源
资源服务器用于验证访问令牌（已经任何错误响应）的方法超出了本规范的访问，但通常涉及资源服务器和授权服务器之间的协调

客户端访问令牌对资源服务器进行身份验证的方法取决于授权服务器发出的访问令牌的类型。


Access Token Type（访问令牌类型）
访问令牌类型为客户端提供成功利用访问令牌来发出受白虎资源请求所需的信息（以及特定于类型的属性）。如果客户端不理解令牌
类型，则不得使用访问令牌
每个访问令牌类型定义都指定其他属性与accesstoken响应参数一起发生给客户端

error response
如果资源访问请求失败 资源服务器应该通知客户端错误。   可以使用error_uri 和 error_description来返回错误

八----------------

Extensibility(可扩展性)  没看懂
default access_token type 默认类型

Defining New Endpoint Parameters（定义新的端点参数）
 
Defining New Authorization Grant Types（定义新的授权授予类型）
  
Defining New Authorization Endpoint Response Types（定义新的授权端点响应类型）

Defining Additional Error Codes（定义附加错误代码）

九---------------------
Native application（原生应用）没看懂



十 Security Considerations  安全考虑因素

client Authentication 客户端认证
授权服务器与web客户端建立客户端凭据 进行客户端身份验证。改授权服务器被鼓励考虑强大的客户和客户端密码认证方式
web应用程序客户端必须确保客户端密码和客户端凭据的机密性。
授权服务器不得为客户端身份验证向本机应用程序或基于用户代理的应用程序客户端发出客户端密码或其他客户端凭据。
改授权服务器可以发出用户密码或其他凭证的本地应用程序客户端的一个特点的安装特定的设备。
当无法进行客户端身份验证时，授权服务器应该采用其他方法来验证客户端的身份
授权服务器必须考虑与未经身份验证的客户端交互的安全隐患，并采取措施先支付发布给此类客户端的其他凭据（刷新令牌）的潜在风险

Client Impersonation客户假冒
如果模拟的客户端无法或无法保密期接互动凭据，则恶意客户端可以模拟其他客户端并获取对受保护资源的访问权限

授权服务器必须尽可能地验证客户端。如果授权服务器由于客户端的性质而无法对客户端进行身份验证，则授权服务器必须要求注册用于接收授权
响应的任何重定向URL，并且应该利用其它方法来保护资源所有者面授此类潜在恶意客户端的攻击

授权服务器应该强制执行显示资源所有者身份验证，并向资源所有者提供与有关客户端以及请求的授权范围和生存期的信息
它是由资源所有者查看上下文中的信息并授权或拒绝请求。

授权服务器不应自动处理重复的授权请求（没有获得资源所有者交互），无需验证客户端或依赖其他措施来确保重复请求来自原始客户端而不是模仿者


Access Token  

访问令牌的凭证（以及任何机密访问令牌属性）必须在传输和存储中保密，并且仅在授权服务器，访问令牌有效的资源服务器以及发出访问令牌的客户端之间的共享。访问令牌凭证必须使用TLS传输
在隐式授权类型时访问令牌在URL片段中传输，这可以将其暴露给未授权方

客户端应该在必要的最小范围内请求访问令牌，授权服务器在选择如何遵守请求的范围时应该考虑客户端身份，并且可以发出权限少于请求的访问令牌

改规范没有为资源服务器提供任何方法来确保授权服务器向给定客户端发出他的访问令牌

Refresh Token 
授权服务器可以向web应用程序客户端和本机应用程序客户端发出刷新令牌
刷新令牌必须在传输和存储中保密，并且仅在授权服务器和发布刷新令牌的客户端之间共享。授权服务器必须维护刷新令牌与发布它的客户端之间共享。授权服务器必须维护刷新令牌与发布它的客户端之间绑定。刷新令牌必须仅适用TLS传输。

授权服务器必须验证刷新之间绑定 只要可以验证客户端身份，就可以适用令牌和客户端身份。当无法进行客户端身份验证时，授权服务器应该部署其他方法来检测刷新令牌滥用。
（例如：授权服务器可以采用刷新令牌轮换，其中每个访问令牌刷新响应发出新的令牌）。以前的刷新令牌无效 但由授权服务器保留。如果刷新令牌被泄露并随后被攻击者和合法客户端使用，则其中一个将呈现无效的刷新令牌，这将通知授权服务器违规，

授权服务器必须确保生成，修改或猜测刷新令牌已由未授权方生产有效的刷新令牌

Authorization Codes

授权代码的传输应该通过安全通道进行，如果URL标识网络资源，客户端应该要求使用带有重定向URL的TLS。由于授权代码是通过用户代理重定向传输的，因此可能会通过用户代理历史记录和HTTP引用标头来披露他们。

授权代码作为明文承载凭证运行，用于验证授权服务器上授权的资源所有者是返回客户端以完成该过程的同一资源所有者。因此如果客户依赖对于自己的资源所有者身份验证的授权代码，客户端重定向端点必须要求使用TLS。
授权码必须是短期和单词使用的。如果授权服务器观察到多次尝试交换访问令牌的授权代码，则授权服务器应该尝试根据受损的授权代码撤销已授予的所有访问令牌

如果可以对客户端进行身份验证，则授权服务器必须对客户端进行身份验证，并确保授权代码已颁发给同一客户端。

Authorization Code Redirection URI Manipulation （授权代码重定向URL操作）
使用授权代码授予类型请求授权时，客户端可以通过"redirect_uri"参数指向重定向URL，如果攻击者可以操纵重定向的值，则可能导致授权服务器使用授权代码将资源所有者用户代理重定向到受攻击者控制的URL。
攻击者可以在合法客户端创建账户并启动授权流程。当攻击者的用户代理被发生到授权服务器以授予访问权限时，攻击者会抓取合法客户端提供的授权URL并替换客户端的重定向URL，其URL由攻击者控制。然后攻击者欺骗受害者跟随操纵的链接已授权访问合法客户端。
一旦到达授权服务器，受害者就会代表合法且受信任的客户端提示正常有效的请求，并授权改请求。然后受害者将使用授权码重定向到攻击者控制下的端点。攻击者通过使用原始重定向URL将授权代码发生到客户端来完成授权流程有客户提供。客户端使用访问令牌交换授权代码，并将其链接到攻击者的客户账户，改账户现在可以访问受害者授权的授保护资源（通过客户端）。
为了防止这种攻击，授权服务器必须确保用于获取授权代码的重定向URL与交换访问令牌的授权代码是提供的重定向URL上相同。授权服务器必须要求公共客户端，并且应该要求机密客户端注册其重定向URL在请求中，授权服务器必须根据注册制对其进行验证


Resource Owner Password Credentials（资源所有者密码凭据）
资源所有者凭据授予类型通常用于遗留或迁移原因。它降低了客户端存储用户名和密码的总体风险，但不会消除向客户端公开高权限凭据需要

此授权类型比其他授权类型具有更高的风险，因为他维护了此协议试图避免的密码反模式。客户端可能滥用密码，或者密码可能无意中被泄露给攻击者（例如，通过日志文件或客户端保存的其他记录）

此外，因资源所有者无法控制授权过程（资源所有者的参与在将其配置移交给客户端时结束），客户端可以获得范围比资源所有者所希望的范围更广的范围令牌。授权服务器应考虑通过此授权类型发出的访问令牌的范围和圣母周期。

授权服务器和客户端应该尽可能地减少对此授权类型的使用，并尽可能利用其它授权类型

Request Confidentiality（请求保密）
访问令牌 刷新令牌 资源所有者密码 和客户端凭证不得以明文传输。授权码不应该以明文传输。
"state"和"scope" 参数不应包括明文中的敏感客户端或资源所有者信息，因为他们可以通过不安全的通道传输或不安全的存储。

Ensuring Endpoint Authenticity（确定端点真实性）

为了防止中间人攻击，授权服务器必须要求使用TLS 一遍发生授权和令牌端点的任何请求。客户端必须验证TLS证书，并根据其对服务器身份验证的要求

（为了防止中间人攻击，授权服务器必须要求使用TLS和[ RFC2818 ] 定义的服务器身份验证，以便发送到授权和令牌端点的任何请求。客户端必须验证[ RFC6125 ] 定义的授权服务器的TLS证书，并根据其对服务器身份验证的要求。）原文

Credentials-Guessing Attacks（凭证-猜测攻击）
授权服务器必须防止攻击者猜测访问令牌，授权码，刷新令牌，资源所有者密码和客户端凭据。
攻击者猜测生产令牌的概率（以及不打算由最终用户处理的其他凭证）必须小于或等于（-128）并且应该小于或等于（-160）。
授权服务器必须利用其他方法来保护最终用户使用的凭证。

Phishing Attacks（网络钓鱼攻击）
广泛部署此类协议和类似协议可能会导致最终用户习惯于被重定向奥要求他们输入密码的网站。如果最终用户在输入凭据之前不小心被这些网站的真实性，则攻击者可能会利用此做法窃取资源所有者的密码。
服务提供商应该尝试向最终用户介绍网络钓鱼攻击带来的风险，并应提供一下机制，使最终用户能够轻松确认其网站的真实性，客户端开发人员应该考虑他们的安全含义
以及最终用户验证授权服务器的真实性的能力。
为了降低网络钓鱼攻击的风险，授权服务器必须在每个用于最终用户交互的端点上使用TLS

Cross-Site Request Forgery（跨站请求伪造）
跨站点请求伪造（CSRF）是一种攻击，其中攻击者是受危害最终用户的用户代理遵循URL（例如，作为误导性链接，图像或重定向提供给用户代理）到信任服务器（通常通过存在有效的会话cookie建立）
针对客户端重定向URL的CSRF攻击允许攻击者注入其自己的授权代码或访问令牌，这可能导致客户端使用与攻击者受保护资源相关联的访问令牌而不是手盖着

客户端必须为重定向URL实现CSRF保护。这通常通过要求发生到重定向URL端点的任何请求包括请求绑定到应该代理的认证状态的值（例如：用于认证用户代理的会话cookie的散列）来实现。在发出授权请求时，客户端应该使用"state"请求参数将此值传递给授权服务器。
一旦从最终用户获得授权，授权服务器就会将最终用户的用户代理重定向回客户端，并在"state"中包含所需的绑定值参数。绑定值使客户端能够通过绑定值与用户代理的已验证状态进行匹配来 验证请求的有效性，用于CSRF保护的绑定值必须包含一个不可猜测的值，并且用户代理的身份验证状态（例如：会话cookie，HTML5本地存储）必须保存在智能由接互动访问的位置和用户代理（即受同源策略保护）。
针对授权服务器的授权端点的CSRF攻击可能导致攻击者获得恶意客户端的最终用户授权，而不涉及或警告最终用户。授权服务器必须为其授权端点实施CSRF保护，并确保恶意客户端在没有资源所有者的意思和明确同意的情况下无法获得授权。

Clickjacking（点击劫持）
在点击劫持攻击中，攻击者注册一个合法的客户端，然后构建一个恶意站点，在该站点中，他讲一个透明的iframe ，加载到一组虚拟按钮顶部的授权服务器授权端点网页，这些虚拟按钮经过精心构造，可直接放置在授权页面上的重要按钮下，当最终用户点击误导性可见按钮时，最终用户实际上是在授权页面上单击一个不可见按钮 。这种攻击者欺骗资源所有者在没有最终用户知情的情况下授予其客户端访问权限
为了防止这种形式的攻击，本机应用程序应该在请求最终用户授权时使用外部浏览器，而不是在应用程序中嵌入浏览器，对于大多数较新的浏览器，授权服务器可以使用（非标准）
"x-frame-options"标头强制避免使用iframe 此标头可以有两个值，"deny"和"sameorigin"，他们将分别阻止任何框架或由具有不同来源的网站框架。对于旧的浏览器，可以使用JavaScript帧破坏技术，但是在所有浏览器中可能无效。

Code Injection and Input Validation（代码注入或者输入验证）
当未经过请求的应用程序使用输入或其他外部变量并导致修改应用程序逻辑时，会发生代码注入攻击。这可能允许攻击者获取对应用程序设备或其数据的访问权限，导致拒绝服务或引入各种恶意副作用。
授权服务器和客户端必须清理（并在可能的情况下）收到的任何值-特别是"state"和"redirect_uri"参数的值。

Open Redirectors（打开重定向器）
授权服务器，授权端点和客户端重定向端点可能配置不正确，并作为开放重定向允许。开放重定向器是一个端点，使用参数自动将用户代理重定向到参数值指定的位置，而不进行任何验证。
开放重定向器可用于网络钓鱼攻击，或者有攻击者通过使用熟悉且受信任的目标的URL权限组件来是最终用户访问恶意站点。此外，如果授权服务器允许客户端仅注册部分重定向URL，则攻击者可以使用其操作的开放重定向器。

Misuse of Access Token to Impersonate Resource Owner in Implicit Flow（滥用访问令牌模仿隐式资源所有者流程）
对于隐式流的公共客户端，此规范不为客户端提供任何方法来确定向其发出访问令牌的客户端。
资源所有者可以通过向攻击者的恶意客户端授予访问令牌来自愿对资源的访问权限。这可能是由于网络钓鱼或其他一些借口造成的。攻击者还可以通过其他机制窃取令牌。然后攻击者还可已通过向合法公共客户端提供访问令牌来尝试模拟资源所有者。
在隐式流(response_type = token)中，攻击者可以轻松地在授权服务器的响应中切换令牌，将实际访问令牌替换为先前给攻击者的令牌。

与依赖与在后向信道中传递访问令牌以识别客户端用户的本机应用程序通信的服务器可能同样受到攻击者的攻击没改攻击者创建可以注入任意被盗访问令牌的受损应用程序。

假设只有资源所有者可以使用资源的有效访问令牌来呈现它的任何公共客户端都容易受到此攻击。

此类攻击可能会将合法客户端的资源所有者的信息暴露给攻击者（恶意客户端）。这个还讲允许攻击者使用与最初授予访问令牌或授权代码的资源所有者相同的权限在合法客户端执行操作。

向客户端验证资源所有者草除了此规范的范围。任何使用授权过程作为委托客户端最终用户身份验证形式的规范（例如：第三方登陆服务）都不得使用隐式流，而不使用其他安全机制来使客户端能够确定访问权限发布令牌以供其使用（例如，限制访问令牌的受众）


十一、 IANA Considerations （IANA注意事项）

OAuth Access Token Types Registry（OAuth访问令牌类型注册表）
此规范建立OAuth访问令牌类型注册表。
根据一个或多个指定专家的建议，在oauth-ext-review@ietf.org邮件列表上进行为期两周的审核期后。
访问令牌类型将使用规范要求（ RFC5226）进行注册 但是为了允许在发布之前分配值，指定专家一旦确信将发布此类规范，即可批准注册。
注册请求必须发生到oauth-ext-review@ietf.org邮件列表以提供审查和评论，并提供适当的主题。

在审核期间内，指定专家将批准或拒绝注册请求，将此决定传达给审核列表和IANA。拒绝应包括解释，并在适用的情况下提供有关如何使请求成功的建议。
IANA必须仅接受指定专家的注册表更新，并应将所有注册请求发生至审核右键列表。


Registration Template（注册模板）
附加令牌端点响应参数：与access_token 参数一起返回的附加响应参数。必须在OAuth parameters注册表中单独注册新参数。
HTTP身份验证方案：
HTTP身份验证方案(如果有)，用于使用此类型的访问令牌对受保护的资源请求身份验证。
更改控制器：
对于standards tracj rfc 请说明"IETF"。对于其他人，请提供名称责任方。还可以包括其他细节（例如，邮政资质，电子邮件地址。主页URL）
规范文档：
对指定参数的文档的引用，最好包括可用于检索文档副本的URL。也可以包括相关部分的提示，但不是必须的。

OAuth Parameters Registry OAuth 参数注册表
此规范建立了OAuth Parameters 注册表。在对oauth_ext_review进行两周的审核期后，包含在授权端点请求，授权端点响应，令牌端点请求或令牌端点响应中的其他参数将在规范要求（RFC5226）总注册
@ietf.org邮件列表，根据一位或多为指定专家的建议。但是为了允许在发布之前分配值，指定专家一旦确信将发布此类规范，即可批准
注册请求必须发送到oauth-ext-review@ietf.org 邮件列表，以便通过适当的主题进行审核和评论

在审核期内，指定专家将批准或拒绝注册请求，将此决定传达给审核列表和IANA。拒绝应包括解释，并在适用的情况下提供有关如何使请求成功的建议。
IANA必须仅接受指定专家的注册表更新，并应将所有注册请求发送至审核邮件列表。 

 Registration Template

 Initial Registry Contents（初始注册表内容）；
 client_id
 client_secret
 response_type
 redirect_uri
 scope
 state
 code
 error_description
 error_uri
 access_token
 token_type
 expires_in
 password
 refresh_token
 


 OAuth Authorization Endpoint Response Types Registry

  Registration Template

 Initial Registry Contents


OAuth Extensions Error Registry

Registration Template






    
			
   